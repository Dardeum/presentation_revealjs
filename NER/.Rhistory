#| label: load-libraries
library(data.table)
library(tidyverse)
library(ggthemr)
library(ggstatsplot)
#library(bbplot)
library(hrbrthemes)
library(streamgraph)
library(ggstream)
library(ggplot2)
library(ggTimeSeries)
library(flextable)
library(gt)
library(patchwork)
library(extrafont)
library(scales)
library(igraph)
library(ggraph)
library(visNetwork)
library(networkD3)
ggthemr("fresh")
#loadfonts(device = "win")
#windowsFonts()
#| label: load-data
# Lire les données
data_sentiment <- fread("data_VF/full_data_covid_combined_sentiment_language.csv")
# Filtrer les tweets originaux
data_sentiment_originals <- data_sentiment %>%
filter(tweet_type == "original")
# Transformer la colonne 'date' en character pour pouvoir manipuler les chaînes
data_sentiment_originals$date <- as.character(data_sentiment_originals$date)
# Identifier les lignes où la date est manquante ou vide
nodate_indata <- data_sentiment_originals %>%
filter(is.na(date) | date == "")
# Corriger les dates manquantes à partir des colonnes 'hour' ou 'user_verified'
nodate_indata <- nodate_indata %>%
mutate(
# Si la date est manquante ou vide, vérifier si 'hour' contient une date au format 'yyyy-mm-dd'
date = ifelse(is.na(date) | date == "",
ifelse(grepl("^\\d{4}-\\d{2}-\\d{2}$", hour), hour, date), date),
# Si 'hour' ne contient pas de date valide, vérifier 'user_verified' pour un format de date
date = ifelse(is.na(date) | date == "",
ifelse(grepl("^\\d{4}-\\d{2}-\\d{2}$", user_verified), user_verified, date), date)
)
# Réintégrer les lignes corrigées dans le jeu de données principal
data_sentiment_originals <- data_sentiment_originals %>%
# Garder les lignes qui n'avaient pas de dates incorrectes
filter(!(is.na(date) | date == "")) %>%
# Ajouter les lignes corrigées
bind_rows(nodate_indata)
# Reconvertir toutes les dates en format Date
data_sentiment_originals$date <- as.Date(data_sentiment_originals$date)
data_sentiment_originals_python <- data_sentiment_originals %>% select(text, language, `side effects`) %>% filter(language == "fr")
#| label: extract-side-effects
# Filtrer les tweets mentionnant des effets secondaires
tweets_side_effects <- data_sentiment_originals %>%
filter(`side effects` != "")
# Grouper par date et compter les mentions par jour
side_effects_per_day <- tweets_side_effects %>%
group_by(date) %>%
summarise(count = n())
# Vérifier les tweets sans date
na_date <- tweets_side_effects %>%
filter(is.na(date) | date == "")
# Visualiser les mentions d'effets secondaires par jour avec des couleurs distinctes par entreprise
ggplot(side_effects_per_day, aes(x = date, y = count)) +
geom_line(color = "blue") +
# Ajout des lignes verticales pour chaque entreprise avec des couleurs distinctes
geom_vline(xintercept = as.Date("2020-12-21"), linetype = "dashed", color = "red") +
geom_vline(xintercept = as.Date("2021-01-06"), linetype = "dashed", color = "green") +
geom_vline(xintercept = as.Date("2021-01-29"), linetype = "dashed", color = "purple") +
geom_vline(xintercept = as.Date("2021-03-11"), linetype = "dashed", color = "orange") +
geom_vline(xintercept = as.Date("2021-12-20"), linetype = "dashed", color = "blue") +
# Ajout des annotations pour chaque entreprise
geom_text(aes(x = as.Date("2020-12-21"), y = 100, label = "Pfizer/BioNTech\nVaccine Approval"),
hjust = 0, vjust = 0, color = "red") +
geom_text(aes(x = as.Date("2021-01-06"), y = 80, label = "Moderna\nVaccine Approval"),
hjust = 0, vjust = 0, color = "green") +
geom_text(aes(x = as.Date("2021-01-29"), y = 100, label = "AstraZeneca\nVaccine Approval"),
hjust = 0, vjust = 0, color = "purple") +
geom_text(aes(x = as.Date("2021-03-11"), y = 120, label = "Johnson & Johnson\nVaccine Approval"),
hjust = 0, vjust = 0, color = "orange") +
geom_text(aes(x = as.Date("2021-12-20"), y = 140, label = "Novavax\nVaccine Approval"),
hjust = 0, vjust = 0, color = "blue") +
# Titres et étiquettes
labs(title = "Daily Mentions of Side Effects Over Time",
x = "Date",
y = "Number of Tweets Mentioning Side Effects")
#| label: extract-side-effects
# Filtrer les tweets mentionnant des effets secondaires
tweets_side_effects <- data_sentiment_originals %>%
filter(`side effects` != "")
# Grouper par date et compter les mentions par jour
side_effects_per_day <- tweets_side_effects %>%
group_by(date) %>%
summarise(count = n())
# Vérifier les tweets sans date
na_date <- tweets_side_effects %>%
filter(is.na(date) | date == "")
# Visualiser les mentions d'effets secondaires par jour avec des couleurs distinctes par entreprise
ggplot(side_effects_per_day, aes(x = date, y = count)) +
geom_line(color = "blue") +
# Ajout des lignes verticales pour chaque entreprise avec des couleurs distinctes
geom_vline(xintercept = as.Date("2020-12-21"), linetype = "dashed", color = "red") +
geom_vline(xintercept = as.Date("2021-01-06"), linetype = "dashed", color = "green") +
geom_vline(xintercept = as.Date("2021-01-29"), linetype = "dashed", color = "purple") +
geom_vline(xintercept = as.Date("2021-03-11"), linetype = "dashed", color = "orange") +
geom_vline(xintercept = as.Date("2021-12-20"), linetype = "dashed", color = "blue") +
# Ajout des annotations pour chaque entreprise
geom_text(aes(x = as.Date("2020-12-21"), y = 100, label = "Pfizer/BioNTech\nVaccine Approval"),
hjust = 0, vjust = 0, color = "red") +
geom_text(aes(x = as.Date("2021-01-06"), y = 80, label = "Moderna\nVaccine Approval"),
hjust = 0, vjust = 0, color = "green") +
geom_text(aes(x = as.Date("2021-01-29"), y = 100, label = "AstraZeneca\nVaccine Approval"),
hjust = 0, vjust = 0, color = "purple") +
geom_text(aes(x = as.Date("2021-03-11"), y = 120, label = "Johnson & Johnson\nVaccine Approval"),
hjust = 0, vjust = 0, color = "orange") +
geom_text(aes(x = as.Date("2021-12-20"), y = 140, label = "Novavax\nVaccine Approval"),
hjust = 0, vjust = 0, color = "blue") +
# Titres et étiquettes
labs(title = "Daily Mentions of Side Effects Over Time",
x = "Date",
y = "Number of Tweets Mentioning Side Effects")
#| label: unique-side-effects
mots_a_supprimer <- c("effet", "side", "effects")
unique_side_effects <- data_sentiment_originals %>%
filter(language == "fr") %>%
mutate(`side effects` = tolower(`side effects`)) %>%
distinct(`side effects`) %>%
separate_rows(`side effects`, sep = ",\\s*") %>%  # Separate side effects by comma
filter(!str_detect(`side effects`, paste(mots_a_supprimer, collapse = "|"))) %>%
filter(`side effects` != "") %>%
group_by(`side effects`) %>%
summarise(n = n()) %>%
arrange(-n)
unique_side_effects
#| label: unique-side-effects
words_to_delete <- c("effet", "side", "effects")
unique_side_effects <- data_sentiment_originals %>%
filter(language == "fr") %>%
mutate(`side effects` = tolower(`side effects`)) %>%
separate_rows(`side effects`, sep = ",\\s*") %>%  # Separate side effects by comma
filter(
!str_detect(`side effects`, paste(words_to_delete, collapse = "|")),
`side effects` != ""
) %>%
group_by(`side effects`) %>%
summarise(n = n()) %>%
arrange(-n)
unique_side_effects
#| label: unique-side-effects
words_to_delete <- c("effet", "side", "effects")
unique_side_effects <- data_sentiment_originals %>%
filter(language == "fr") %>%
mutate(`side effects` = tolower(`side effects`)) %>%
separate_rows(`side effects`, sep = ",\\s*") %>%  # Séparer chaque effet en ligne individuelle
filter(!str_detect(`side effects`, paste(words_to_delete, collapse = "|"))) %>%
filter(`side effects` != "") %>%
group_by(`side effects`) %>%
summarise(n = n()) %>%
arrange(-n)
unique_side_effects
unique_side_effects <- data_sentiment_originals %>%
filter(language == "fr") %>%
mutate(`side effects` = tolower(`side effects`)) %>%
separate_rows(`side effects`, sep = ",\\s*") %>%  # Séparer chaque effet en ligne individuelle
filter(!str_detect(`side effects`, paste(words_to_delete, collapse = "|"))) %>%
filter(`side effects` != "") %>%
group_by(`side effects`) %>%
summarise(n = n()) %>%
arrange(-n)
